{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Managing Workspace Environment Without Sudo Access","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This guide provides strategies for managing a workspace environment and installing software without sudo access. It covers Python environment management, software installation using CMake, shared modules, and other useful techniques.</p>"},{"location":"#python-environment-management","title":"Python Environment Management","text":"<p>For Python, we recommend using Conda, preferably in conjunction with Mamba for faster package resolution and installation.</p>"},{"location":"#basic-conda-commands","title":"Basic Conda Commands","text":"<pre><code># Create a new environment\nconda create --name myenv python=3.8\n\n# Activate the environment\nconda activate myenv\n\n# Install packages\nconda install package_name\n\n# Deactivate the environment\nconda deactivate\n</code></pre>"},{"location":"#using-mamba-with-conda","title":"Using Mamba with Conda","text":"<p>Mamba is a faster alternative to Conda's solver. Here's how to set it up and use it with Conda:</p> <pre><code># Install Mamba in the base Conda environment\nconda install mamba -n base -c conda-forge\n\n# Set Mamba as the solver for Conda\nconda config --set solver mamba\n</code></pre> <p>After setting Mamba as the solver, you can continue to use the <code>conda</code> command, which will now use Mamba's faster solver:</p> <pre><code># Install packages using Conda (now with Mamba solver)\nconda install package_name\n\n# Create environments (now faster with Mamba solver)\nconda create -n newenv python=3.9\n</code></pre> <p>If you want to use Mamba directly, you can still do so:</p> <pre><code># Use Mamba directly\nmamba install package_name\n</code></pre> <p>This setup allows you to benefit from Mamba's speed while maintaining the familiar Conda workflow.</p>"},{"location":"#installing-software-with-cmake","title":"Installing Software with CMake","text":"<p>For software that uses CMake, you can install it in your user directory:</p> <pre><code># Clone the repository\ngit clone https://github.com/example/software.git\ncd software\n\n# Create a build directory\nmkdir build &amp;&amp; cd build\n\n# Configure CMake to install in your home directory\ncmake .. -DCMAKE_INSTALL_PREFIX=$HOME/.local\n\n# Build and install\nmake\nmake install\n</code></pre>"},{"location":"#user-directory-structure","title":"User Directory Structure","text":"<p>Create bin and lib directories in your home folder:</p> <pre><code>mkdir -p $HOME/.local/{bin,lib}\n</code></pre> <p>Add the following to your <code>.bashrc</code> or <code>.bash_profile</code>:</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\nexport LD_LIBRARY_PATH=\"$HOME/.local/lib:$LD_LIBRARY_PATH\"\n</code></pre>"},{"location":"#using-shared-modules","title":"Using Shared Modules","text":"<p>Shared modules allow you to load pre-installed software packages.</p>"},{"location":"#basic-module-commands","title":"Basic Module Commands","text":"<pre><code># List available modules\nmodule avail\n\n# Load a module\nmodule load module_name\n\n# Unload a module\nmodule unload module_name\n\n# List loaded modules\nmodule list\n</code></pre>"},{"location":"#mathlab-modules","title":"MathLab Modules","text":"<p>MathLab provides its own set of modules. To use them:</p> <pre><code># Add MathLab modules to the module path\nmodule use /opt/contrib/mathlab/modules\n\n# Load a specific MathLab module, e.g., OpenFOAM\nmodule load openfoam/2106\n</code></pre> <p>This allows you to access MathLab-specific software and tools that are pre-installed on the system.</p>"},{"location":"#using-spack","title":"Using Spack","text":"<p>Spack is a flexible package manager for HPC environments. To use Spack:</p> <pre><code># Clone Spack repository\ngit clone https://github.com/spack/spack.git\n\n# Set up Spack environment\n. /path/to/spack/share/spack/setup-env.sh\n\n# Install a package\nspack install package_name\n</code></pre>"},{"location":"#using-flatpak-for-non-scientific-applications","title":"Using Flatpak for Non-Scientific Applications","text":"<p>Flatpak is a useful tool for installing and managing non-scientific applications without root access. Here's how to set it up and use it:</p> <pre><code># Install Flatpak for your user (if not already available)\nwget https://dl.flathub.org/repo/flathub.flatpakrepo\nflatpak --user remote-add --if-not-exists flathub flathub.flatpakrepo\n\n# Install an application\nflatpak --user install flathub com.application.Name\n\n# Run the installed application\nflatpak run com.application.Name\n\n# Update all installed Flatpak applications\nflatpak --user update\n\n# List installed Flatpak applications\nflatpak --user list\n</code></pre> <p>Flatpak allows you to install a wide range of desktop applications, productivity tools, and development environments without requiring system-wide installation privileges.</p>"},{"location":"#extracting-and-using-rpm-packages","title":"Extracting and Using RPM Packages","text":"<p>When you need to use software from an RPM package without system-wide installation, you can extract its contents and use them directly. Here's an expanded guide on working with extracted RPM packages:</p> <pre><code># Extract the RPM package\nrpm2cpio ../package.rpm | cpio -idmv\n</code></pre> <p>After extraction, you'll typically find a directory structure similar to the following:</p> <ul> <li><code>usr/bin/</code>: Contains executable files</li> <li><code>usr/lib/</code>: Contains library files</li> <li><code>usr/share/</code>: Contains shared data, documentation, etc.</li> </ul> <p>To use the extracted software:</p> <pre><code># Add the bin directory to your PATH\nexport PATH=\"$PWD/usr/bin:$PATH\"\n\n# Add the lib directory to your LD_LIBRARY_PATH (if needed)\nexport LD_LIBRARY_PATH=\"$PWD/usr/lib:$LD_LIBRARY_PATH\"\n\n# Run the extracted executable\n./usr/bin/executable_name\n</code></pre> <p>For a more permanent setup, you can move the extracted contents to your user's local directories:</p> <pre><code># Move executables\nmv usr/bin/* $HOME/.local/bin/\n\n# Move libraries (if needed)\nmv usr/lib/* $HOME/.local/lib/\n\n# Move shared data (if needed)\nmv usr/share/* $HOME/.local/share/\n</code></pre> <p>Remember to update your <code>.bashrc</code> or <code>.bash_profile</code> to include these directories in your PATH and LD_LIBRARY_PATH as shown in the \"User Directory Structure\" section.</p>"}]}